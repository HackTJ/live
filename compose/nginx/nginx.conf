# first we declare our upstream server, which is our Gunicorn application
upstream hacktj_live {
    # docker will automatically resolve this to the correct address
    # because we use the same name as the service: "django"
    server django:8000;

    # fail_timeout=0 means we always retry an upstream even if it failed to
    # return a good HTTP response
    # for UNIX domain socket setups
    # server unix:/tmp/gunicorn.sock fail_timeout=0;
}

# now we declare our main server
server {
    listen 80;

    location / {
        try_files $uri @proxy_to_app;

        gzip on;
    }

    location @proxy_to_app {
        proxy_pass http://hacktj_live;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_redirect off;
        proxy_buffering off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_connect_timeout 300s;
        proxy_read_timeout 300s;

        gzip on;
    }

    location /static/ {
        root /usr/share/nginx/html/;

        gzip on;
    }

    # return 444;

}
